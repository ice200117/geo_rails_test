b = Time.local
da.include? date
da = [date, Time.now]
date = Time.now
a.include? 2
a.include?[2]
a = [1,2,3]
Hash[1,2]
Hash.new(['1',1])
Hash.new('1',1)
v[0].length
v[1].length
v[1]
v[0]
exit
c
exi
a.last
a.first
a = Hash[*mld.flatten]
Hash[*mld.flatten]
Hash[*mld[0].flatten]
mld[0]
add_loss_hour_data(forecast_data_hour[i])
mld
v[0]
c
monitor_data_hour
exit
add_loss_hour_data(forecast_data_hour[i])
add_loss_hour_data(monitor_data_hour)
v[1]
v[0]
v
n
c
et
st
c
n
et
st
c
n
c
disable breakpoints
disable
c
delete
help
hellp
c
n
ret2
ret1
n
c
ret2
ret1
n
et
st
continue
data2[0]
data1[0]
data1[744]
data1[10]
data1[11]
data1[10]
data1[9]
data1[11]
data1[20]
data1[4]
data1[2]
data1[1]
data1[100]
data1[744]
data1[0]
data2[0]
data2[719]
data2.length
data1.length
data2.last
data2.first
data1.first
data1.last
data2[0][0]
data1[0][0]
et
n
st
n
data2
data1
n
ret_data
n
data
n
ret_data
n
data
s
n
puts v
v
n
c
b 180
@correlation
forecast_data_hour.length
n
forecast_data_hour
c
n
@correlation
achf.each {|d| puts d[:city_name] }
achf.each {|d| puts d[:city_name] ;return nil}
achf.each {|d| puts d[:city_name] return nil}
achf.each {|d| puts d[:city_name]}
achf.length
achf
c
achf
quit
c
cf
n
cf
n
exit
eixt
exit
puts c
c
puts c
c
n
m
n
c
b 151
c
n
c
ac
n
c
n
l
ac
c
n
exit
c
exit
fn
n
c
@monitor_forecast_hour_month_diff
exit
@monitor_forecast_hour_month_diff
n
data
ret_data
exit
show
pry
c
delete
help
c
f
c
data[i+1][1]
data[i+1][0]
ret_data
n
st
ret_data
n
puts i
n
ret_data
n
ret_data
c
puts i
i
data
c
cc
c
d.publish_datetime+36.hours
d.publish_datetime+12.hours
d.forecast_datetime
c
d.forecast_datetime < d.publish_datetime+36.hours
d.forecast_datetime >= d.publish_datetime+12.hours
d.publish_datetime+12.hours
d.forecast_datetime
c
a << 3
a = [1,2]
d.forecast_datetime >= d.publish_datetime+12.hours && d.forecast_datetime < d.publish_datetime+36.hours
d.forecast_datetime >= d.publish_datetime+12.hours
d.publish_datetime+12.hours
d.publish_datetime
d.forecast_datetime
d
data
exit
p city
n
p time
p t
s
n
p model
p hs
s
n
p hs
p sh
s
n
p hs
p sh
n
exit
p day_city
n
nn
n
day_city
n
time
t
model
s
n
s
n
 hour_data_common(hs,TempBdHour)
p ' if hour_data_common(hs,TempBdHour)
n
p hs
n
p hs
p sh
n
secretstr.class
q
c
CL
ncfile
