exit
p hebeidatabyday
exit
p mp
exit
p mp
exit
p mp
exit
p mp
exit
p data
exit
p hs
exit
p city
n
s
exit
MonitorPoint.find_by_pointname(city)exit
MonitorPoint.find_by_pointname(city)
t
p city
n
p t
s
t
exit
p t
exit
p hs
n
s
n
s
exit
hs[:cities].each do |l| puts l end
hs[:cities]
hs
exit
p hs
exit
data
exit
data[0]['city_id']
data[0].city_id
data[0]
p data
p t
exit
p data
exit
p l
l
exit
p l
n
p l
l
p l
l
n
city
n
city
n
city
n
p l
l
exit
@data
exit
data
n
exit
n
\
n
d
exit
TempSfcitiesMonth.where(data_real_time:(st..et)).length
TempSfcitiesMonth.where(data_real_time:(st..et)).nil?
TempSfcitiesMonth.where(data_real_time:(st..et))
et = '20160606'.to_time
et = '20160606
st = '20150101'.to_time
p d
exit
n
data
n
time
model
exit
data
n
s
exit
Custom::Redis.get('qhd_hour').nil?
Custom::Redis.get('qhd_hour')
$redis.get('qhd_hour').nil?
$redis.get('qhd_hour')
n
exit
data
n
@qhdbyday
@qhdday
exit
flag
l
data
c
n
data.length
data
exit
data
exit
data
$redis.keys
exit
$redis.get('get_rank_chart_data_day')
$redis.keys
$redis.get('get_rank_chart_data')
exit
data.as_json
data
tmp.as_json!
tmp
tmp.as_json.class
tmp.as_json
a.class
a
a=tmp
a = Hash.new
tmp.to_hash
tmp.to_json
tmp
tmp.class
tmp.methods
tmp.to_hash
tmp.to_hash!
n
exit
n
exit
tmp
n
exit
p tmp
tmp
n
exit
n
exit
v.length
v.size
v.class
p v
exit
tmp['data_real_time']
tmp['data_real_time'}
p tmp
p v
exit
p v
continue
p v
exit
p v
v
k
c
rank
c
n
@rank
exit
help
n
@rank
exit
fore_range[1]
fore_range[0]
fore_range.length
fore_range.keys
fore_range
exit
n
file
n
fn
n
fn
py
c
n
c
forecast_data_hour_ann[4].length
forecast_data_hour_ann[2].length
forecast_data_hour_ann[1].length
forecast_data_hour_ann[0].length
forecast_data_hour_ann.length
c
n
c
forecast_data_hour_ann[4].length
forecast_data_hour_ann[2].length
forecast_data_hour_ann[1].length
forecast_data_hour_ann[0].length
forecast_data_hour_ann.length
c
n
c
puts v
d
n
get_lev(v["min"])
v["min"]
n
c
@weather
ForecastDailyDatum.all
c
n
d
c
n
fore_range
continue
@weather
fore_range
c
@weather
c
get_lev(v["min_forecast"])
v["min_forecast"]
c
exit
@weather
c
fore_range
@weather
v["min_forecast"]
v[:min_forecast]
puts v
v["min_forecast"]
c
n
fore_range
c
fore_range
@weather
c
